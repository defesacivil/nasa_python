# -*- coding: utf-8 -*-
"""
Diagn√≥stico do Problema de Gera√ß√£o de Mapa no QGIS
==================================================

Este script identifica e corrige problemas comuns na gera√ß√£o do mapa final
do algoritmo LHASA MG no QGIS.
"""

import os
import sys
from datetime import datetime

def diagnosticar_problemas_qgis():
    """
    Diagnostica problemas comuns na gera√ß√£o de mapas no QGIS
    """
    print("=== DIAGN√ìSTICO DE PROBLEMAS - MAPA LHASA MG NO QGIS ===")
    print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("=" * 70)
    
    problemas_identificados = []
    solucoes = []
    
    print("\n1. VERIFICANDO ESTRUTURA DO ALGORITMO...")
    
    # Verificar se a classe est√° corretamente implementada
    try:
        from LHASA_MG import LhasaMgAnalysis
        print("   ‚úì Classe LhasaMgAnalysis encontrada")
        
        # Verificar m√©todos essenciais
        metodos_essenciais = [
            'initAlgorithm', 'processAlgorithm', 'executeRiskAnalysisQgis',
            'associateRainDataQgis', 'loadPluviometricDataQgis'
        ]
        
        for metodo in metodos_essenciais:
            if hasattr(LhasaMgAnalysis, metodo):
                print(f"   ‚úì M√©todo {metodo} encontrado")
            else:
                print(f"   ‚úó M√©todo {metodo} N√ÉO encontrado")
                problemas_identificados.append(f"M√©todo {metodo} ausente")
                solucoes.append(f"Implementar m√©todo {metodo} na classe LhasaMgAnalysis")
        
    except ImportError as e:
        print(f"   ‚úó Erro ao importar LhasaMgAnalysis: {e}")
        problemas_identificados.append("Erro de importa√ß√£o da classe principal")
        solucoes.append("Verificar se o arquivo LHASA_MG.py est√° no diret√≥rio correto")
    
    print("\n2. VERIFICANDO PAR√ÇMETROS DO ALGORITMO...")
    
    # Verificar par√¢metros de entrada
    parametros_esperados = [
        'INPUT_SUSCETIBILIDADE',
        'INPUT_ZONAS_PLUVIOMETRICAS', 
        'INPUT_DATA_ANALISE',
        'INPUT_TIPO_ANALISE',
        'OUTPUT_RESULTADO'
    ]
    
    try:
        from LHASA_MG import LhasaMgAnalysis
        algoritmo = LhasaMgAnalysis()
        
        # Verificar se os par√¢metros est√£o definidos
        for param in parametros_esperados:
            if hasattr(algoritmo, param):
                print(f"   ‚úì Par√¢metro {param} definido")
            else:
                print(f"   ‚úó Par√¢metro {param} N√ÉO definido")
                problemas_identificados.append(f"Par√¢metro {param} ausente")
                solucoes.append(f"Adicionar par√¢metro {param} na classe")
        
    except Exception as e:
        print(f"   ‚úó Erro ao verificar par√¢metros: {e}")
        problemas_identificados.append("Erro na verifica√ß√£o de par√¢metros")
    
    print("\n3. VERIFICANDO PROCESSAMENTO GEOGR√ÅFICO...")
    
    # Verificar se as ferramentas de processamento est√£o dispon√≠veis
    try:
        from qgis.core import QgsApplication
        from qgis import processing
        
        # Verificar ferramentas essenciais
        ferramentas_essenciais = [
            'native:extractbyexpression',
            'native:intersection', 
            'native:fieldcalculator',
            'native:dissolve'
        ]
        
        for ferramenta in ferramentas_essenciais:
            try:
                # Tentar obter informa√ß√µes da ferramenta
                info = processing.algorithmHelp(ferramenta)
                if info:
                    print(f"   ‚úì Ferramenta {ferramenta} dispon√≠vel")
                else:
                    print(f"   ‚úó Ferramenta {ferramenta} N√ÉO dispon√≠vel")
                    problemas_identificados.append(f"Ferramenta {ferramenta} indispon√≠vel")
                    solucoes.append(f"Verificar se o QGIS est√° instalado corretamente")
            except Exception as e:
                print(f"   ‚úó Erro ao verificar ferramenta {ferramenta}: {e}")
                problemas_identificados.append(f"Erro na ferramenta {ferramenta}")
        
    except ImportError as e:
        print(f"   ‚úó QGIS n√£o dispon√≠vel: {e}")
        problemas_identificados.append("QGIS n√£o dispon√≠vel")
        solucoes.append("Executar o script dentro do QGIS")
    
    print("\n4. VERIFICANDO CAMPOS E DADOS...")
    
    # Verificar campos esperados
    campos_esperados = {
        'suscetibilidade': ['gridcode'],
        'zonas_pluviometricas': ['Cod', 'Est'],
        'dados_chuva': ['NM_M15', 'NM_H01', 'NM_H04', 'NM_H24', 'NM_H96']
    }
    
    for tipo, campos in campos_esperados.items():
        print(f"   Campos esperados para {tipo}: {campos}")
        print(f"   ‚úì Verificar se estes campos existem nas camadas de entrada")
    
    print("\n5. VERIFICANDO SISTEMA DE COORDENADAS...")
    
    print("   SRC recomendado para o projeto QGIS:")
    print("   - SIRGAS 2000 / UTM Zona 23S (EPSG:31983)")
    print("   - Ou outro sistema projetado em metros")
    print("   ‚úì Verificar se o projeto QGIS est√° configurado corretamente")
    
    print("\n6. VERIFICANDO LOGS E DEBUGGING...")
    
    # Verificar se o sistema de logging est√° funcionando
    try:
        from logger import lhasa_logger, log_event
        print("   ‚úì Sistema de logging dispon√≠vel")
        
        # Testar logging
        log_event("DIAGNOSTICO", "Teste de logging durante diagn√≥stico")
        print("   ‚úì Logging funcionando corretamente")
        
    except ImportError as e:
        print(f"   ‚úó Sistema de logging n√£o dispon√≠vel: {e}")
        problemas_identificados.append("Sistema de logging indispon√≠vel")
        solucoes.append("Verificar se o arquivo logger.py est√° no diret√≥rio correto")
    
    print("\n7. PROBLEMAS COMUNS IDENTIFICADOS...")
    
    problemas_comuns = [
        "Camadas de entrada n√£o carregadas no QGIS",
        "Campos com nomes diferentes dos esperados",
        "SRC do projeto n√£o configurado corretamente",
        "Token da API INMET n√£o configurado",
        "Camadas de entrada vazias ou sem geometria",
        "Erro na express√£o de c√°lculo do campo PERIGO",
        "Problemas de permiss√£o para salvar arquivo de sa√≠da"
    ]
    
    for i, problema in enumerate(problemas_comuns, 1):
        print(f"   {i}. {problema}")
    
    print("\n8. SOLU√á√ïES RECOMENDADAS...")
    
    solucoes_recomendadas = [
        "1. Verificar se as camadas de entrada est√£o carregadas no QGIS",
        "2. Verificar se os nomes dos campos correspondem aos esperados",
        "3. Configurar o SRC do projeto para SIRGAS 2000 / UTM Zona 23S",
        "4. Configurar o token da API INMET no c√≥digo",
        "5. Verificar se as camadas t√™m geometrias v√°lidas",
        "6. Testar a express√£o de c√°lculo do campo PERIGO",
        "7. Verificar permiss√µes de escrita no diret√≥rio de sa√≠da",
        "8. Usar o sistema de logging para identificar erros espec√≠ficos",
        "9. Executar o algoritmo passo a passo para identificar onde falha",
        "10. Verificar se todas as depend√™ncias est√£o instaladas"
    ]
    
    for solucao in solucoes_recomendadas:
        print(f"   {solucao}")
    
    print("\n9. RESUMO DO DIAGN√ìSTICO...")
    
    if problemas_identificados:
        print(f"   ‚úó {len(problemas_identificados)} problema(s) identificado(s):")
        for i, problema in enumerate(problemas_identificados, 1):
            print(f"      {i}. {problema}")
        
        print(f"\n   üí° Solu√ß√µes sugeridas:")
        for i, solucao in enumerate(solucoes, 1):
            print(f"      {i}. {solucao}")
    else:
        print("   ‚úì Nenhum problema estrutural identificado")
        print("   üí° O problema pode estar nos dados de entrada ou configura√ß√£o do QGIS")
    
    print("\n10. PR√ìXIMOS PASSOS...")
    
    print("   1. Execute o algoritmo no QGIS com o sistema de logging ativado")
    print("   2. Verifique os logs gerados em logs/LHASA_MG_*.log")
    print("   3. Identifique em qual etapa o algoritmo falha")
    print("   4. Verifique os dados de entrada (camadas, campos, geometrias)")
    print("   5. Teste com dados de exemplo simples")
    print("   6. Configure corretamente o token da API INMET")
    
    return problemas_identificados, solucoes


def criar_script_teste_qgis():
    """
    Cria um script de teste simplificado para QGIS
    """
    script_teste = '''# -*- coding: utf-8 -*-
"""
Script de Teste Simplificado para QGIS
======================================

Execute este script no console Python do QGIS para testar
a gera√ß√£o de mapas do algoritmo LHASA MG.
"""

from qgis.core import QgsProject, QgsVectorLayer, QgsField, QgsFeature
from qgis.PyQt.QtCore import QVariant
import processing

def testar_geracao_mapa():
    """
    Testa a gera√ß√£o de mapa com dados de exemplo
    """
    print("=== TESTE DE GERA√á√ÉO DE MAPA LHASA MG ===")
    
    # 1. Verificar se h√° camadas carregadas
    project = QgsProject.instance()
    layers = project.mapLayers()
    
    print(f"Camadas carregadas: {len(layers)}")
    
    if len(layers) == 0:
        print("‚ùå Nenhuma camada carregada no QGIS")
        print("üí° Carregue as camadas de suscetibilidade e zonas pluviom√©tricas")
        return False
    
    # 2. Listar camadas dispon√≠veis
    print("\\nCamadas dispon√≠veis:")
    for layer_id, layer in layers.items():
        print(f"  - {layer.name()} (ID: {layer_id})")
        print(f"    Tipo: {layer.geometryType()}")
        print(f"    Features: {layer.featureCount()}")
        print(f"    Campos: {[field.name() for field in layer.fields()]}")
        print()
    
    # 3. Verificar campos necess√°rios
    print("Verificando campos necess√°rios...")
    
    for layer_id, layer in layers.items():
        if layer.geometryType() == 1:  # Polygon
            fields = [field.name() for field in layer.fields()]
            
            # Verificar campos de suscetibilidade
            if 'gridcode' in fields:
                print(f"‚úì Camada {layer.name()} tem campo 'gridcode'")
            else:
                print(f"‚úó Camada {layer.name()} N√ÉO tem campo 'gridcode'")
                print("   Campos dispon√≠veis:", fields)
            
            # Verificar campos de zonas pluviom√©tricas
            if 'Cod' in fields and 'Est' in fields:
                print(f"‚úì Camada {layer.name()} tem campos 'Cod' e 'Est'")
            else:
                print(f"‚úó Camada {layer.name()} N√ÉO tem campos 'Cod' e 'Est'")
                print("   Campos dispon√≠veis:", fields)
    
    # 4. Testar ferramentas de processamento
    print("\\nTestando ferramentas de processamento...")
    
    ferramentas_teste = [
        'native:extractbyexpression',
        'native:intersection',
        'native:fieldcalculator',
        'native:dissolve'
    ]
    
    for ferramenta in ferramentas_teste:
        try:
            info = processing.algorithmHelp(ferramenta)
            if info:
                print(f"‚úì {ferramenta} dispon√≠vel")
            else:
                print(f"‚úó {ferramenta} N√ÉO dispon√≠vel")
        except Exception as e:
            print(f"‚úó Erro ao verificar {ferramenta}: {e}")
    
    # 5. Testar com dados de exemplo
    print("\\nTestando com dados de exemplo...")
    
    try:
        # Criar camada de teste
        layer_teste = QgsVectorLayer("Polygon?crs=EPSG:4674", "teste", "memory")
        provider = layer_teste.dataProvider()
        
        # Adicionar campos
        provider.addAttributes([
            QgsField("gridcode", QVariant.Int),
            QgsField("teste", QVariant.String)
        ])
        layer_teste.updateFields()
        
        # Adicionar feature de teste
        feature = QgsFeature()
        feature.setAttributes([2, "teste"])
        provider.addFeatures([feature])
        
        print("‚úì Camada de teste criada com sucesso")
        
        # Testar ferramenta de sele√ß√£o
        resultado = processing.run("native:extractbyexpression", {
            'INPUT': layer_teste,
            'EXPRESSION': '"gridcode" = 2',
            'OUTPUT': 'memory:'
        })
        
        if resultado['OUTPUT']:
            print("‚úì Ferramenta de sele√ß√£o funcionando")
        else:
            print("‚úó Ferramenta de sele√ß√£o falhou")
        
    except Exception as e:
        print(f"‚úó Erro no teste: {e}")
    
    print("\\n=== TESTE CONCLU√çDO ===")
    return True

# Executar teste
if __name__ == "__main__":
    testar_geracao_mapa()
'''
    
    with open("Plugin/teste_qgis_simples.py", "w", encoding="utf-8") as f:
        f.write(script_teste)
    
    print("‚úì Script de teste criado: Plugin/teste_qgis_simples.py")
    print("üí° Execute este script no console Python do QGIS")


def criar_guia_solucao_problemas():
    """
    Cria um guia de solu√ß√£o de problemas
    """
    guia = '''# Guia de Solu√ß√£o de Problemas - Mapa LHASA MG no QGIS

## Problemas Comuns e Solu√ß√µes

### 1. ‚ùå "Nenhuma camada carregada no QGIS"

**Problema:** O algoritmo n√£o encontra as camadas de entrada.

**Solu√ß√µes:**
- Carregue as camadas de suscetibilidade e zonas pluviom√©tricas no QGIS
- Verifique se as camadas est√£o vis√≠veis no painel de camadas
- Use o formato correto dos arquivos (Shapefile, GeoPackage, etc.)

### 2. ‚ùå "Campo 'gridcode' n√£o encontrado"

**Problema:** A camada de suscetibilidade n√£o tem o campo esperado.

**Solu√ß√µes:**
- Verifique o nome do campo na tabela de atributos
- Renomeie o campo para 'gridcode' se necess√°rio
- Ou modifique o c√≥digo para usar o nome correto do campo

### 3. ‚ùå "Campos 'Cod' e 'Est' n√£o encontrados"

**Problema:** A camada de zonas pluviom√©tricas n√£o tem os campos esperados.

**Solu√ß√µes:**
- Verifique os nomes dos campos na tabela de atributos
- Renomeie os campos para 'Cod' e 'Est' se necess√°rio
- Ou modifique o c√≥digo para usar os nomes corretos

### 4. ‚ùå "Erro na ferramenta de processamento"

**Problema:** As ferramentas nativas do QGIS n√£o est√£o funcionando.

**Solu√ß√µes:**
- Verifique se o QGIS est√° instalado corretamente
- Atualize o QGIS para a vers√£o mais recente
- Verifique se o plugin de processamento est√° ativado

### 5. ‚ùå "Token da API INMET inv√°lido"

**Problema:** N√£o √© poss√≠vel buscar dados meteorol√≥gicos.

**Solu√ß√µes:**
- Configure o token correto da API INMET no c√≥digo
- Verifique se o token est√° ativo e v√°lido
- Teste a conex√£o com a API manualmente

### 6. ‚ùå "Arquivo de sa√≠da n√£o pode ser salvo"

**Problema:** Erro ao salvar o resultado final.

**Solu√ß√µes:**
- Verifique as permiss√µes de escrita no diret√≥rio
- Use um caminho de arquivo v√°lido
- Verifique se h√° espa√ßo suficiente em disco

### 7. ‚ùå "Geometrias inv√°lidas"

**Problema:** As camadas t√™m geometrias corrompidas.

**Solu√ß√µes:**
- Use a ferramenta "Corrigir geometrias" do QGIS
- Verifique se as camadas t√™m SRC definido
- Valide as geometrias antes de usar

### 8. ‚ùå "SRC incorreto"

**Problema:** As camadas n√£o est√£o alinhadas corretamente.

**Solu√ß√µes:**
- Configure o SRC do projeto para SIRGAS 2000 / UTM Zona 23S
- Verifique se todas as camadas t√™m SRC definido
- Use a reproje√ß√£o autom√°tica do QGIS

## Como Usar o Sistema de Logging

1. **Ativar logs detalhados:**
   ```python
   from logger import lhasa_logger
   lhasa_logger.logger.setLevel(logging.DEBUG)
   ```

2. **Verificar logs gerados:**
   - Arquivo principal: `logs/LHASA_MG_YYYYMMDD_HHMMSS.log`
   - Arquivo de erros: `logs/LHASA_ERRORS_YYYYMMDD_HHMMSS.log`
   - Arquivo da sess√£o: `logs/LHASA_SESSION_YYYYMMDD_HHMMSS.json`

3. **Interpretar os logs:**
   - Procure por mensagens de erro espec√≠ficas
   - Verifique o contexto dos erros
   - Use os logs para identificar onde o algoritmo falha

## Teste Passo a Passo

1. **Carregar camadas de teste:**
   - Camada de suscetibilidade com campo 'gridcode'
   - Camada de zonas pluviom√©tricas com campos 'Cod' e 'Est'

2. **Configurar projeto:**
   - SRC: SIRGAS 2000 / UTM Zona 23S (EPSG:31983)
   - Verificar se as camadas est√£o alinhadas

3. **Executar algoritmo:**
   - Use a Caixa de Ferramentas de Processamento
   - Configure os par√¢metros corretamente
   - Monitore os logs durante a execu√ß√£o

4. **Verificar resultado:**
   - O mapa final deve aparecer no QGIS
   - Verificar se os n√≠veis de perigo est√£o corretos
   - Validar a geometria do resultado

## Contato e Suporte

Se os problemas persistirem:
1. Verifique os logs detalhados
2. Teste com dados de exemplo simples
3. Execute o script de diagn√≥stico
4. Consulte a documenta√ß√£o do QGIS
'''
    
    with open("Plugin/GUIA_SOLUCAO_PROBLEMAS.md", "w", encoding="utf-8") as f:
        f.write(guia)
    
    print("‚úì Guia de solu√ß√£o criado: Plugin/GUIA_SOLUCAO_PROBLEMAS.md")


if __name__ == "__main__":
    print("Iniciando diagn√≥stico de problemas do mapa QGIS...")
    
    # Executar diagn√≥stico
    problemas, solucoes = diagnosticar_problemas_qgis()
    
    # Criar scripts de ajuda
    criar_script_teste_qgis()
    criar_guia_solucao_problemas()
    
    print("\n=== DIAGN√ìSTICO CONCLU√çDO ===")
    print("Arquivos criados:")
    print("- Plugin/teste_qgis_simples.py")
    print("- Plugin/GUIA_SOLUCAO_PROBLEMAS.md")
    print("\nPr√≥ximos passos:")
    print("1. Execute o script de teste no QGIS")
    print("2. Consulte o guia de solu√ß√£o de problemas")
    print("3. Use o sistema de logging para identificar erros espec√≠ficos")



